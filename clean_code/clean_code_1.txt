이 책을 읽는 이유
첫째 프로그래머라서
둘째 더 나은 프로그래머가 되려고

이책은 좋은 프로그램 작성 요령을 설명하는 책이고 온통 코드들이다.
코드를 최대한 다양한 각도에서 살펴보고 꼼꼼히 따져본다.
이 책을 읽고나면 좋은 코드와 나쁜 코드를 구분하는 능력이 생긴다!
또한 좋은 코드를 작성하는 방법과 나쁜 코드를 좋은 코드로 바꾸는 실력도 쌓인다!

-코드가 존재 하리라
코드는 요구사항을 상세히 표현하는 수준이니깐 사라질 가망이 없다.
어느 수준에 이르면 코드의 도움 없이 요구사항을 상세하게 표현 하기란 불가능, 추상화도 불가능
기계가 실행할 정도로 상세하게 요구사항을 명시하는 작업 바로 이것이 프로그래밍이다.

프로그래밍 언어에서 추상화 수준은 점차 높아지지만 특정 응용 분야에 적합한 프로그래밍 언어 수도 점차 많아질 것이다.
그런다고 코드가 사라지지는 않는다.
요구사항을 모호하게 줘도 우리 의도를 정확하게 꿰뚫는 프로그램은 없다.

-나쁜코드
우리 모두는 좋은 코드가 중요하다는 삿실을 안다 왜? 오랬동안 나쁜 코드에 시달려 왔으니깐
80년대 후반 킬러 앱 하나를 구현한 회사가 있다 제품은 커다란 인기를 끌었으며 수많은 전문가가 구매해 사용했다
그러다 제품 출시 주기가 점차 늘어지기 시작했고 버전이 넘어가도 버그가 남아있었다.
프로그램은 죽는 횟수가 많아지고 회사는 망했다.
회사는 매우 바빳고 코드를 마구 짯다 기능을 추가할수록 코드는 엉망이 되었고 결국은 감당이 불가능한 수준에 이르렀다
회사가 사망한 원인은 바로 나쁜 코드 탓이다s
우리는 돌아가는 것에 안주하고 나중에 고친다는 다짐을 반복한다 하지만 다시 고치는 일은 오지 않는다
르블랑의 법칙을 몰랐고 나중은 결코 오지 않는다.

-나쁜 코드로 치르는 대가
2~3년 넘게 프로그래밍을 짯다면 남들이 저질러 놓은 쓰레기 코드로 고생한 경험이 있을것이다.
코드가 하도 엉망이라 프로젝트 진도가 안나가는 경험도 있으리라 나쁜 코드는 개발 속도를 크게 떨어트린다
프로젝트 초반에는 매우 빠른 개발 속도를 가졌다가 1~2년만에 굼뱅이처럼 기어가는 팀도 많다 
코드를 고칠 때마다 엉뚱한 곳에서 문제가 생긴다.
간단한 변경은 없다 매번 얽히고 설킨 코드를 해독해서 얽히고 설킨 코드를 더한다 
시간이 지나면서 쓰레기 더미는 점점 높아지고 깇어지고 커진다 청소할 방법이 없다 불가 항력이다.
나쁜 코드가 쌓일수록 팀 생산성은 떨어진다 그러다가 마침네 0에 근접한다
생산성이 떨어지면 관리층은 나름대로 복구를 시도한다 
어떻게? 생산성을 증가시키려는 희망을 품고 프로젝트에 인력을 추가로 투입한다
하지만 새 인력은 시스템 설계에 대한 조예가 깊지 않다 설계 의도에 맞는 변경과 설계 의도에 반하는 변경을 구분핮 ㅣ못한다.
게다가 새 인력과 팀은 생산성을 높여야 한다는 극심한 압력에 시달린다. 
이로인해 생산성은 더더욱 떨어져 0에 수렴한다.

-원대한 재설계의 꿈